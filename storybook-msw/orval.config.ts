import { InputOptions, OutputOptions } from '@orval/core';
import type { oas30 } from 'openapi3-ts';
import { defineConfig } from 'orval';
import { operationsTransformer } from './config/orval/operations-transformer';
import { zodTransformer } from './config/orval/zod-transformer';
import { customAxiosInstance } from './config/orval/custom-axios-instance';

const clean = process.argv.includes('--clean');
const validate = Boolean(process.env.ORVAL_VALIDATE);

 
console.log(
    'SDK generation by Orval.' +
        `\nMode: ${clean ? 'clean' : 'generate'}` +
        '\nUse env ORVAL_VALIDATE=true for schema validation' +
        `\nCurrent validation: ${validate ? 'enabled' : 'disabled'}`,
);

const commonOutputOptions: OutputOptions = {
    // mode: 'tags-split',
    mode: 'single',


    // prettier: true, // fails on zod generation, not reliable
    urlEncodeParameters: true,
    override: {
        useDeprecatedOperations: false,
        header: (info: oas30.InfoObject): string[] => [
            `Generated by orval üç∫`,
            `Do not edit manually.`,
            ...(info.title ? [info.title] : []),
            ...(info.version ? [`OpenAPI schema version: ${info.version}`] : []),
        ],
    },
};

const commonInputOptions: InputOptions = {
    target: './openapi.yml',

    /**
     * Generates only code from given tags,
     * avoiding not-used generated code.
     */
    // filters: {
    //     tags: [
    //         // custom-query API is wrong and cannot be used for now
    //     ],
    // },

    validation: validate,
    parserOptions: {
        validate,
    },
};

export default defineConfig({
    sdk: {
        output: {
            client: 'react-query',
            target: 'src/sdk/operations/index.ts',

            // ...commonOutputOptions,

            schemas: 'src/sdk/model',

            override: {
                ...commonOutputOptions.override,
                mutator: {
                    path: './config/orval/custom-axios-instance.ts',
                    name: customAxiosInstance.name, // for typing purpose
                },
                // query: {
                //     queryOptions: {
                //         path: './src/sdk/core/use-custom-query-options.ts',
                //         name: 'useCustomQueryOptions',
                //     },
                //     mutationOptions: {
                //         path: './src/sdk/core/use-custom-mutation-options.ts',
                //         name: 'useCustomMutationOptions',
                //     },
                // },
            },

            mock: {
                type: 'msw',
                delay: false,
                useExamples: false,
            },
        },
        input: {
            ...commonInputOptions,

            override: {
                ...commonInputOptions.override,
                transformer: operationsTransformer,
            },
        },
    },
    sdk_zod: {
        output: {
            client: 'zod',
            target: 'src/sdk/operations',

            ...commonOutputOptions,

            fileExtension: '.zod.ts',
        },
        input: {
            ...commonInputOptions,

            override: {
                ...commonInputOptions.override,
                transformer: zodTransformer,
            },
        },
    },
});